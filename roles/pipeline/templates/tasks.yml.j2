{% for username in workshop_users|json_query("[].username") %}
- apiVersion: tekton.dev/v1beta1
  kind: Task
  metadata:
    name: s2i-eap-7
    namespace: {{ username }}-cicd
  spec:
    params:
    - default: .
      description: The location of the path to run s2i from
      name: PATH_CONTEXT
      type: string
    - default: "true"
      description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
      name: TLSVERIFY
      type: string
    - default: ""
      description: Additional Maven arguments
      name: MAVEN_ARGS_APPEND
      type: string
    - default: "false"
      description: Remove the Maven repository after the artifact is built
      name: MAVEN_CLEAR_REPO
      type: string
    - default: ""
      description: The base URL of a mirror used for retrieving artifacts
      name: MAVEN_MIRROR_URL
      type: string
    resources:
      inputs:
      - name: source
        type: git
      outputs:
        - name: image
          type: image
    steps:
    - args:
      - |-
        echo "MAVEN_CLEAR_REPO=$(params.MAVEN_CLEAR_REPO)" > env-file

        [[ '$(params.MAVEN_ARGS_APPEND)' != "" ]] &&
          echo "MAVEN_ARGS_APPEND=$(params.MAVEN_ARGS_APPEND)" >> env-file

        [[ '$(params.MAVEN_MIRROR_URL)' != "" ]] &&
          echo "MAVEN_MIRROR_URL=$(params.MAVEN_MIRROR_URL)" >> env-file

        echo "Generated Env file"
        echo "------------------------------"
        cat env-file
        echo "------------------------------"
      command:
      - /bin/sh
      - -c
      image: quay.io/openshift-pipeline/s2i
      name: gen-env-file
      resources: {}
      volumeMounts:
      - mountPath: /env-params
        name: envparams
      workingDir: /env-params
    - command:
      - s2i
      - build
      - $(params.PATH_CONTEXT)
      # This could also use something like image-registry.openshift-image-registry.svc.cluster.local:5000/openshift/jboss-eap72-openshift:1.1
      # from the built in registry
      - image-registry.openshift-image-registry.svc.cluster.local:5000/openshift/jboss-eap72-openshift:1.1
      - --image-scripts-url
      - image:///usr/local/s2i
      - --as-dockerfile
      - /gen-source/Dockerfile.gen
      - --environment-file
      - /env-params/env-file
      image: quay.io/openshift-pipeline/s2i
      name: generate
      resources: {}
      volumeMounts:
      - mountPath: /gen-source
        name: gen-source
      - mountPath: /env-params
        name: envparams
      workingDir: /workspace/source
    - command:
      - buildah
      - bud
      - --tls-verify=$(params.TLSVERIFY)
      - --layers
      - -f
      - /gen-source/Dockerfile.gen
      - -t
      - $(outputs.resources.image.url)
      - .
      image: quay.io/buildah/stable
      name: build
      resources: {}
      securityContext:
        privileged: true
      volumeMounts:
      - mountPath: /var/lib/containers
        name: varlibcontainers
      - mountPath: /gen-source
        name: gen-source
      workingDir: /gen-source
    - command:
      - buildah
      - push
      - --tls-verify=$(params.TLSVERIFY)
      - $(outputs.resources.image.url)
      - docker://$(outputs.resources.image.url)
      image: quay.io/buildah/stable
      name: push
      resources: {}
      securityContext:
        privileged: true
      volumeMounts:
      - mountPath: /var/lib/containers
        name: varlibcontainers
    volumes:
    - emptyDir: {}
      name: varlibcontainers
    - emptyDir: {}
      name: gen-source
    - emptyDir: {}
      name: envparams

- apiVersion: tekton.dev/v1beta1
  kind: Task
  metadata:
    name: maven-java8
    namespace: {{ username }}-cicd
  spec:
    params:
      - default:
          - package
        description: maven goals to run
        name: GOALS
        type: array
      - default: configuration/cicd-settings-nexus3.xml
        description: location of the settings file
        name: settings-path
        type: string
    resources:
      inputs:
        - name: source
          type: git
    steps:
      - args:
          - $(params.GOALS)
          - '-s$(inputs.resources.source.path)/$(params.settings-path)'
        command:
          - /usr/bin/mvn
        image: 'gcr.io/cloud-builders/mvn:3.5.0-jdk-8'
        name: mvn-goals
        resources: {}
    workspaces:
      - name: maven-repo

- apiVersion: tekton.dev/v1beta1
  kind: Task
  metadata:
    name: deploy-jboss-app-to-dev
    namespace: {{ username }}-cicd
  spec:
    params:
      - default: tasks
        description: The name of the app
        name: app_name
        type: string
      - default: {{ username }}-dev
        description: The name dev project
        name: dev_project
        type: string
      - description: binary artifact path in the local artifact repo
        # something like org/jboss/quickstarts/eap/jboss-tasks-rs/7.0.0-SNAPSHOT/jboss-tasks-rs-7.0.0-SNAPSHOT.war
        type: string
        name: artifact_path
    resources:
      inputs:
        - name: source
          type: git
    steps:
      - name: extract-git-rev
        image: 'gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:latest'
        script: >
          #!/bin/sh

          set -e -o pipefail

          # get git sha

          git rev-parse --verify --short HEAD | tee
          $(inputs.resources.source.path)/$(params.app_name)-gitsha.txt
        workingDir: $(inputs.resources.source.path)
      - name: create-build-config
        image: 'quay.io/openshift/origin-cli:latest'
        script: >
          #!/bin/sh

          set -e -o pipefail

          echo "Creating new build config"  

          GITSHA=$(cat
          $(inputs.resources.source.path)/$(params.app_name)-gitsha.txt)  


          echo "Extracted git revision from previous step $GITSHA" 

          # This allows the new build to be created whether it exists or not

          oc new-build -o yaml --name=$(params.app_name) --image-stream=jboss-eap72-openshift:1.1  --binary=true -n
          $(params.dev_project) | oc apply -n $(params.dev_project) -f - 
      - name: build-app-image
        image: 'quay.io/openshift/origin-cli:latest'    
        script: >
          #!/bin/sh

          set -e -o pipefail

          echo "Start the openshift build"  


          rm -rf $(inputs.resources.source.path)/oc-build && mkdir -p $(inputs.resources.source.path)/oc-build/deployments 


          cp $(workspaces.maven-repo.path)/$(params.artifact_path) $(inputs.resources.source.path)/oc-build/deployments/ROOT.war 


          oc start-build $(params.app_name) --from-dir=$(inputs.resources.source.path)/oc-build -n   $(params.dev_project) --wait=true 

          GITSHA=$(cat $(inputs.resources.source.path)/$(params.app_name)-gitsha.txt) 


          oc tag $(params.app_name):latest  $(params.app_name):$GITSHA -n $(params.dev_project) 

          echo "Successfully created container image $(params.dev_project)/$(params.app_name):$GITSHA"
      - name: deploy-app-from-image
        image: 'quay.io/openshift/origin-cli:latest'            
        script: >
          #!/bin/sh

          set -e -o pipefail

          echo "Create new app from tasks image stream in $(params.dev_project) project"   

          GITSHA=$(cat $(inputs.resources.source.path)/$(params.app_name)-gitsha.txt) 

          oc new-app --image-stream=$(params.app_name):$GITSHA -n
          $(params.dev_project) --as-deployment-config=true -o yaml | oc apply -n $(params.dev_project)  -f - 

          echo "Setting manual triggers on deployment $(params.app_name)"

          oc set triggers dc/$(params.app_name) --manual=true -n  $(params.dev_project) 

          if ! oc get route/$(params.app_name) -n $(params.dev_project) ; then

            oc expose svc $(params.app_name) -n $(params.dev_project) || echo "Failed to create route for $(params.app_name)"

          fi
            
          oc rollout latest dc/$(params.app_name) -n  $(params.dev_project)

      - name: announce-success
        image: 'gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:latest'      
        script: >
          #!/bin/sh

          set -e -o pipefail


          GITSHA=$(cat
          $(inputs.resources.source.path)/$(params.app_name)-gitsha.txt) 
          &&

          echo "Successfully build application $(params.app_name)"

          echo "After testing the app, run the deploy-app-to-stage pipeline with
          $GITSHA as the app_version parameter"
        workingDir: $(inputs.resources.source.path)
    workspaces:
      - name: maven-repo

- apiVersion: tekton.dev/v1beta1
  kind: Task
  metadata:
    name: deploy-app-to-stage
    namespace: {{ username }}-cicd
  spec:
    params:
      - default: tasks
        description: The name of the app
        name: app_name
        type: string
      - default: user1-dev
        description: The name dev project
        name: dev_project
        type: string
      - default: user1-stage
        description: The name dev project
        name: stage_project
        type: string
      - description: The name dev project
        name: app_revision
        type: string
    steps:
    - name: cleanup-stage-project
      script: >
        #!/bin/sh

        set -e -o pipefail

        echo "Tagging image stream in 
        $(params.stage_project)/$(params.app_name):$(params.app_revision)"          

        oc tag
        $(params.dev_project)/$(params.app_name):$(params.app_revision)
        $(params.stage_project)/$(params.app_name):$(params.app_revision)          

        if oc get dc/$(params.app_name) -n $(params.stage_project); then

          echo "Tasks dc exists, cleaning up resources " 
          
          oc delete -n $(params.stage_project) dc/$(params.app_name) svc/$(params.app_name) route/$(params.app_name) || echo "Some resources didn't clean up as expected"; 

        fi

      image: 'quay.io/openshift/origin-cli:latest'

    - name: deploy-new-version-to-stage
      script: >
        #!/bin/sh

        set -e -o pipefail

        echo "Deploying new version into $(params.stage_project)  project "  

        oc new-app --image-stream=$(params.app_name):$(params.app_revision) -n $(params.stage_project) 
        --as-deployment-config=true -o yaml  | oc apply -n $(params.stage_project)  -f -   


        if ! oc get route/$(params.app_name) -n $(params.stage_project) ; then
          
          echo "Route not found, creating a new one" 

          oc expose svc $(params.app_name) -n  $(params.stage_project); 

        fi  

      image: 'quay.io/openshift/origin-cli:latest'
{% endfor %}
