- kind: BuildConfig
  apiVersion: build.openshift.io/v1
  metadata:
    name: jenkins-e2e-pipeline
    namespace: "{{username}}-cicd"
    labels:
      app: cicd-pipeline
      name: cicd-pipeline
    annotations:
      pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind": "DeploymentConfig"}]'
  spec:
    nodeSelector: {}
    output: {}
    resources: {}
    successfulBuildsHistoryLimit: 5
    failedBuildsHistoryLimit: 5
    strategy:
      type: JenkinsPipeline
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          def version, mvnCmd = "mvn -s configuration/cicd-settings-nexus3.xml"
          def appName = "jp-tasks"

          pipeline {
            agent {
              label 'maven'
            }
            stages {
              stage('show the config') {
                steps {
                  sh "${mvnCmd} -version"
                }
              }
              stage('Build App') {
                steps {
                  git branch: 'dso4', url: 'http://gitea-server.devsecops.svc.cluster.local:3000/user1/openshift-tasks.git'
                  script {
                      def pom = readMavenPom file: 'pom.xml'
                      version = pom.version
                  }
                  
                  sh "${mvnCmd} install -DskipTests=true"
                }
              }
              stage('Test') {
                steps {
                  sh "${mvnCmd} test"
                  step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
                }
              }
              stage('Code Analysis') {
                steps {
                  script {
                    sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://sonarqube.devsecops.svc.cluster.local:9000 -DskipTests=true"
                  }
                }
              }
              stage('Archive App') {
                steps {
                  sh "${mvnCmd} deploy -DskipTests=true -P nexus"
                }
              }
              stage('Create Image Builder') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.DEV_PROJECT) {
                        return !openshift.selector("bc", "$appName").exists();
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.DEV_PROJECT) {
                        openshift.newBuild("--name=$appName", "--image-stream=jboss-eap70-openshift:1.5", "--binary=true")
                      }
                    }
                  }
                }
              }
              stage('Build Image') {
                steps {
                  sh "rm -rf oc-build && mkdir -p oc-build/deployments"
                  sh "cp target/openshift-tasks.war oc-build/deployments/ROOT.war"

                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.DEV_PROJECT) {
                        openshift.selector("bc", "$appName").startBuild("--from-dir=oc-build", "--wait=true")
                      }
                    }
                  }
                }
              }
              stage('Create DEV') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.DEV_PROJECT) {
                        return !openshift.selector('dc', "$appName").exists()
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.DEV_PROJECT) {
                        def app = openshift.newApp("$appName:latest")
                        app.narrow("svc").expose();

                        def dc = openshift.selector("dc", "$appName")
                        while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                            sleep 10
                        }
                        openshift.set("triggers", "dc/$appName", "--manual")
                      }
                    }
                  }
                }
              }
              stage('Deploy DEV') {
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.DEV_PROJECT) {
                        openshift.selector("dc", "$appName").rollout().latest();
                      }
                    }
                  }
                }
              }
              stage('Promote to STAGE?') {
                steps {
                  timeout(time:15, unit:'MINUTES') {
                      input message: "Promote to STAGE?", ok: "Promote"
                  }

                  script {
                    openshift.withCluster() {
                      openshift.tag("${env.DEV_PROJECT}/$appName:latest", "${env.STAGE_PROJECT}/$appName:${version}")
                    }
                  }
                }
              }
              stage('Deploy STAGE') {
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.STAGE_PROJECT) {
                        if (openshift.selector('dc', "$appName").exists()) {
                          openshift.selector('dc', "$appName").delete()
                          openshift.selector('svc', "$appName").delete()
                          openshift.selector('route', "$appName").delete()
                        }

                        openshift.newApp("$appName:${version}").narrow("svc").expose()
                      }
                    }
                  }
                }
              }
            }
          }
        env:
          - name: DEV_PROJECT
            value: "{{username}}-dev"
          - name: STAGE_PROJECT
            value: "{{username}}-stage"
          - name: JAVA_HOME
            value: /usr/lib/jvm/java-1.8.0
    postCommit: {}
    source:
      type: None
    triggers:
      - type: GitHub
        github:
          secret: secret101
      - type: Generic
        generic:
          secret: secret101
    runPolicy: Serial

- kind: BuildConfig
  apiVersion: build.openshift.io/v1
  metadata:
    name: jenkins-deploy-to-dev
    namespace: "{{username}}-cicd"
    labels:
      app: cicd-pipeline
      name: cicd-pipeline
    annotations:
      pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind": "DeploymentConfig"}]'
  spec:
    nodeSelector: {}
    output: {}
    resources: {}
    successfulBuildsHistoryLimit: 5
    failedBuildsHistoryLimit: 5
    strategy:
      type: JenkinsPipeline
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          def version, mvnCmd = "mvn -s configuration/cicd-settings-nexus3.xml"
          def appName = "jp-tasks"
          def gitRev = ""

          pipeline {
            agent {
              label 'maven'
            }
            stages {
              stage('show the config') {
                steps {
                  sh "${mvnCmd} -version"
                }
              }
              stage('Build App') {
                steps {
                  git branch: 'dso4', url: 'http://gitea-server.devsecops.svc.cluster.local:3000/user1/openshift-tasks.git'
                  script {
                      def pom = readMavenPom file: 'pom.xml'
                      version = pom.version
                      gitRev = sh(returnStdout: true, script: "git rev-parse --verify --short HEAD").trim()
                  }
                  
                  
                  sh "${mvnCmd} install -DskipTests=true"
                }
              }
              stage('Test') {
                steps {
                  sh "${mvnCmd} test"
                  step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
                }
              }
              stage('Code Analysis') {
                steps {
                  script {
                    sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://sonarqube.devsecops.svc.cluster.local:9000 -DskipTests=true"
                  }
                }
              }
              stage('Archive App') {
                steps {
                  sh "${mvnCmd} deploy -DskipTests=true -P nexus"
                }
              }
              stage('Create Image Builder') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.DEV_PROJECT) {
                        return !openshift.selector("bc", "$appName").exists();
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.DEV_PROJECT) {
                        openshift.newBuild("--name=$appName", "--image-stream=jboss-eap70-openshift:1.5", "--binary=true")
                      }
                    }
                  }
                }
              }
              stage('Build Image') {
                steps {
                  sh "rm -rf oc-build && mkdir -p oc-build/deployments"
                  sh "cp target/openshift-tasks.war oc-build/deployments/ROOT.war"

                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.DEV_PROJECT) {
                        openshift.selector("bc", "$appName").startBuild("--from-dir=oc-build", "--wait=true")

                        openshift.tag("${env.DEV_PROJECT}/$appName:latest", "${env.DEV_PROJECT}/$appName:${gitRev}")
                      }
                    }
                  }
                }
              }
              stage('Create DEV') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.DEV_PROJECT) {
                        return !openshift.selector('dc', "$appName").exists()
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.DEV_PROJECT) {
                        def app = openshift.newApp("$appName:$gitRev")
                        app.narrow("svc").expose();

                        def dc = openshift.selector("dc", "$appName")
                        while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                            sleep 10
                        }
                        openshift.set("triggers", "dc/$appName", "--manual")
                      }
                    }
                  }
                }
              }
              stage('Deploy DEV') {
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.DEV_PROJECT) {
                        openshift.selector("dc", "$appName").rollout().latest();
                      }
                    }

                    sh "echo 'Successfully deployed app to ${env.DEV_PROJECT}. After verifyng the app in Dev, deploy to stage with ${gitRev} as the APP_VERSION, e.g. oc start-build jenkins-deploy-to-stage -e APP_VERSION=${gitRev}'"
                  }
                }
              }
              
            }
          }
        env:
          - name: DEV_PROJECT
            value: "{{username}}-dev"
          - name: JAVA_HOME
            value: /usr/lib/jvm/java-1.8.0
    postCommit: {}
    source:
      type: None
    triggers:
      - type: GitHub
        github:
          secret: secret101
      - type: Generic
        generic:
          secret: secret101
    runPolicy: Serial

- kind: BuildConfig
  apiVersion: build.openshift.io/v1
  metadata:
    name: jenkins-deploy-to-stage
    namespace: "{{username}}-cicd"
    labels:
      app: cicd-pipeline
      name: cicd-pipeline
    annotations:
      pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind": "DeploymentConfig"}]'
  spec:
    nodeSelector: {}
    output: {}
    resources: {}
    successfulBuildsHistoryLimit: 5
    failedBuildsHistoryLimit: 5
    strategy:
      type: JenkinsPipeline
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          def version, mvnCmd = "mvn -s configuration/cicd-settings-nexus3.xml"
          def appName = "jp-tasks"

          pipeline {
            agent {
              label 'maven'
            }
            stages {
              stage('Check required parameters') {
                steps {
                  script {
                    if (env.APP_VERSION == "") {
                      echo "Deploy to stage pipeline requires specifying APP_VERSION to deploy as an environmental variable"
                      sh "exit 1"
                    }       
                  }            
                }
              }
              
              stage('Promote to STAGE') {
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.tag("${env.DEV_PROJECT}/$appName:${env.APP_VERSION}", "${env.STAGE_PROJECT}/$appName:${env.APP_VERSION}")
                    }
                  }
                }
              }
              stage('Deploy STAGE') {
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.STAGE_PROJECT) {
                        if (openshift.selector('dc', "$appName").exists()) {
                          openshift.selector('dc', "$appName").delete()
                          openshift.selector('svc', "$appName").delete()
                          openshift.selector('route', "$appName").delete()
                        }

                        openshift.newApp("$appName:${env.APP_VERSION}").narrow("svc").expose()
                      }
                    }
                  }
                }
              }
            }
          }
        env:
          - name: DEV_PROJECT
            value: "{{username}}-dev"
          - name: STAGE_PROJECT
            value: "{{username}}-stage"
          - name: APP_VERSION
            value: ""
          - name: JAVA_HOME
            value: /usr/lib/jvm/java-1.8.0
    postCommit: {}
    source:
      type: None
    triggers:
      - type: GitHub
        github:
          secret: secret101
      - type: Generic
        generic:
          secret: secret101
    runPolicy: Serial

