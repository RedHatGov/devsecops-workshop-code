{% for username in workshop_users|json_query("[].username") %}
- apiVersion: tekton.dev/v1beta1
  kind: Task
  metadata:
    name: oscap-image-scan
    namespace: {{ username }}-cicd
  spec:
    params:
    - name: xccdfProfile
      description: The oscap xccdf profile to use when calling the oscap-chroot command
      default: xccdf_org.ssgproject.content_profile_standard
    - name: oscapProfilePath
      description: The full path to the oscap content file
      default: /usr/share/xml/scap/ssg/content/ssg-centos7-ds-1.2.xml
    - name: container-imagetag
      type: string
      default: latest
    - name: container-image-url
      type: string
      default: >
        image-registry.openshift-image-registry.svc.cluster.local:5000/{{ username }}-cicd/openshift-tasks
    workspaces:
    - name: report
      description: Storage for oscap report.html generated by oscap-chroot scan
    steps:
    - name: scan-image
      securityContext:
        privileged: true
      image: quay.io/redhatgov/image-scanner:latest
      command: ['/bin/bash']
      args:
      - -c
      - |
        echo "Pulling image $(inputs.params.container-image-url)"
        buildah from --storage-driver vfs docker://$(inputs.params.container-image-url):$(inputs.params.container-imagetag)
        container_id=$(buildah --storage-driver vfs containers -q)
        echo "Container ID: $container_id"
        echo "Mounting the container..."
        buildah mount --storage-driver vfs $container_id
        echo "Running oscap-chroot scan"
        oscap-chroot $(buildah --storage-driver vfs mount | awk '{print $2}') xccdf eval --profile $(inputs.params.xccdfProfile) --report $(workspaces.report.path)/report.html $(inputs.params.oscapProfilePath)
        echo "Displaying contents of $(workspaces.report.path)/report.html"
        echo "********** START OF report.html **********"
        cat $(workspaces.report.path)/report.html
        echo "********** END OF report.html ************"
{% endfor %}
