{% for username in workshop_users|json_query("[].username") %}
- apiVersion: tekton.dev/v1beta1
  kind: Task
  metadata:
    name: maven-java8
    namespace: {{ username }}-cicd
  spec:
    params:
    - name: GOALS
      default:
      - package
      description: maven goals to run
      type: array
    - name: settings-path
      default: configuration/cicd-settings-nexus3.xml
      description: location of the settings file
      type: string
    resources:
      inputs:
      - name: source
        type: git
    steps:
    - name: mvn-goals
      args:
      - $(params.GOALS)
      - '-s$(inputs.resources.source.path)/$(params.settings-path)'
      command:
      - /usr/bin/mvn
      image: 'gcr.io/cloud-builders/mvn:3.5.0-jdk-8'
      resources: {}
    workspaces:
    - name: maven-repo

- apiVersion: tekton.dev/v1beta1
  kind: Task
  metadata:
    name: deploy-jboss-app-to-dev
    namespace: {{ username }}-cicd
  spec:
    params:
    - name: app_name
      default: tasks
      description: The name of the app
      type: string
    - name: dev_project
      default: {{ username }}-dev
      description: The name dev project
      type: string
    - name: artifact_path
      description: binary artifact path in the local artifact repo
      # something like org/jboss/quickstarts/eap/jboss-tasks-rs/7.0.0-SNAPSHOT/jboss-tasks-rs-7.0.0-SNAPSHOT.war
      type: string
    resources:
      inputs:
      - name: source
        type: git
    steps:
    - name: extract-git-rev
      image: 'gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:latest'
      script: >
        #!/bin/sh

        set -e -o pipefail

        # get git sha

        git rev-parse --verify --short HEAD | tee
        $(inputs.resources.source.path)/$(params.app_name)-gitsha.txt
      workingDir: $(inputs.resources.source.path)
    - name: create-build-config
      image: 'quay.io/openshift/origin-cli:latest'
      script: >
        #!/bin/sh

        set -e -o pipefail

        echo "Creating new build config"

        GITSHA=$(cat
        $(inputs.resources.source.path)/$(params.app_name)-gitsha.txt)


        echo "Extracted git revision from previous step $GITSHA"

        # This allows the new build to be created whether it exists or not

        oc new-build -o yaml --name=$(params.app_name) --image-stream=jboss-eap72-openshift:1.1  --binary=true -n
        $(params.dev_project) | oc apply -n $(params.dev_project) -f -
    - name: build-app-image
      image: 'quay.io/openshift/origin-cli:latest'
      script: >
        #!/bin/sh

        set -e -o pipefail

        echo "Start the openshift build"


        rm -rf $(inputs.resources.source.path)/oc-build && mkdir -p $(inputs.resources.source.path)/oc-build/deployments


        cp $(workspaces.maven-repo.path)/$(params.artifact_path) $(inputs.resources.source.path)/oc-build/deployments/ROOT.war


        oc start-build $(params.app_name) --from-dir=$(inputs.resources.source.path)/oc-build -n   $(params.dev_project) --wait=true

        GITSHA=$(cat $(inputs.resources.source.path)/$(params.app_name)-gitsha.txt)


        oc tag $(params.app_name):latest  $(params.app_name):$GITSHA -n $(params.dev_project)

        echo "Successfully created container image $(params.dev_project)/$(params.app_name):$GITSHA"
    workspaces:
    - name: maven-repo

{# Start new tasks breakout:
    TODO
    ------
    - Modify pipeline to consume the new tasks
    - Inject pvc for `report` workspace for oscap-image-scan task
    -------
    Done
    -------
    - breakout steps `deploy-app-from-image` and `announce-success` from parent task
    - check for unused params in `deploy-app-from-image` and `announce-success` `tasks`
      Both of these `tasks` include literal copies of the `spec` from their previous `tasks`
      when they were `steps`
    - Add oscap-image-scan task to pipeline
#}

- apiVersion: tekton.dev/v1beta1
  kind: Task
  metadata:
    name: deploy-app-from-image
    namespace: {{ username }}-cicd
  spec:
    params:
    - name: app_name
      default: tasks
      description: The name of the app
      type: string
    - name: dev_project
      default: {{ username }}-dev
      description: The name dev project
      type: string
    resources:
      inputs:
      - name: source
        type: git
    steps:
    - name: deploy
      image: 'quay.io/openshift/origin-cli:latest'
      script: >
        #!/bin/sh

        set -e -o pipefail

        echo "Create new app from tasks image stream in $(params.dev_project) project"

        GITSHA=$(cat $(inputs.resources.source.path)/$(params.app_name)-gitsha.txt)

        oc new-app --image-stream=$(params.app_name):$GITSHA -n
        $(params.dev_project) --as-deployment-config=true -o yaml | oc apply -n $(params.dev_project)  -f -

        echo "Setting manual triggers on deployment $(params.app_name)"

        oc set triggers dc/$(params.app_name) --manual=true -n  $(params.dev_project)

        if ! oc get route/$(params.app_name) -n $(params.dev_project) ; then

          oc expose svc $(params.app_name) -n $(params.dev_project) || echo "Failed to create route for $(params.app_name)"

        fi

        oc rollout latest dc/$(params.app_name) -n  $(params.dev_project)
    workspaces:
    - name: maven-repo

- apiVersion: tekton.dev/v1beta1
  kind: Task
  metadata:
    name: announce-success
    namespace: {{ username }}-cicd
  spec:
    params:
    - name: app_name
      default: tasks
      description: The name of the app
      type: string
    resources:
      inputs:
      - name: source
        type: git
    steps:
    - name: announce
      image: 'gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:latest'
      script: >
        #!/bin/sh

        set -e -o pipefail

        GITSHA=$(cat
        $(inputs.resources.source.path)/$(params.app_name)-gitsha.txt)
        &&

        echo "Successfully build application $(params.app_name)"

        echo "After testing the app, run the deploy-app-to-stage pipeline with
        $GITSHA as the app_version parameter"
      workingDir: $(inputs.resources.source.path)
    workspaces:
    - name: maven-repo

- apiVersion: tekton.dev/v1beta1
  kind: Task
  metadata:
    name: oscap-image-scan
  spec:
    params:
    - name: xccdfProfile
      description: The oscap xccdf profile to use when calling the oscap-chroot command
      default: xccdf_org.ssgproject.content_profile_standard
    - name: oscapProfilePath
      description: The full path to the oscap content file
      default: /usr/share/xml/scap/ssg/content/ssg-centos7-ds-1.2.xml
    - name: container-imagetag
      type: string
      default: "latest"
    - name: container-image-url
      type: string
      default: "quay.io/mbach/rstudio-centos7"
    workspaces:
    - name: report
      description: Storage for oscap report.html generated by oscap-chroot scan
    steps:
    - name: scan-image
      securityContext:
        privileged: true
      image: quay.io/redhatgov/image-scanner@sha256:cdc3713816e1d5d70a9cf43d2ffcfc45e7862e2004aa978bdb7a1a594ca8de9e
      command: ['/bin/bash']
      args:
      - -c
      - |
        echo "Pulling image $(inputs.params.container-image-url)"
        buildah from --storage-driver vfs docker://$(inputs.params.container-image-url):$(inputs.params.container-imagetag)
        container_id=$(buildah --storage-driver vfs containers -q)
        echo "Container ID: $container_id"
        echo "Mounting the container..."
        buildah mount --storage-driver vfs $container_id
        echo "Running oscap-chroot scan"
        oscap-chroot $(buildah --storage-driver vfs mount | awk '{print $2}') xccdf eval --profile $(inputs.params.xccdfProfile) --report $(workspaces.report.path)/report.html $(inputs.params.oscapProfilePath)
        echo "Displaying contents of $(workspaces.report.path)/report.html"
        echo "********** START OF report.html **********"
        cat $(workspaces.report.path)/report.html
        echo "********** END OF report.html ************"

- apiVersion: tekton.dev/v1beta1
  kind: Task
  metadata:
    name: deploy-app-to-stage
    namespace: {{ username }}-cicd
  spec:
    params:
    - name: app_name
      default: tasks
      description: The name of the app
      type: string
    - name: dev_project
      default: user1-dev
      description: The name dev project
      type: string
    - name: stage_project
      default: user1-stage
      description: The name dev project
      type: string
    - name: app_revision
      description: The name dev project
      type: string
    steps:
    - name: cleanup-stage-project
      script: >
        #!/bin/sh

        set -e -o pipefail

        echo "Tagging image stream in
        $(params.stage_project)/$(params.app_name):$(params.app_revision)"

        oc tag
        $(params.dev_project)/$(params.app_name):$(params.app_revision)
        $(params.stage_project)/$(params.app_name):$(params.app_revision)

        if oc get dc/$(params.app_name) -n $(params.stage_project); then

          echo "Tasks dc exists, cleaning up resources "

          oc delete -n $(params.stage_project) dc/$(params.app_name) svc/$(params.app_name) route/$(params.app_name) || echo "Some resources didn't clean up as expected";

        fi

      image: 'quay.io/openshift/origin-cli:latest'

    - name: deploy-new-version-to-stage
      script: >
        #!/bin/sh

        set -e -o pipefail

        echo "Deploying new version into $(params.stage_project)  project "

        oc new-app --image-stream=$(params.app_name):$(params.app_revision) -n $(params.stage_project)
        --as-deployment-config=true -o yaml  | oc apply -n $(params.stage_project)  -f -


        if ! oc get route/$(params.app_name) -n $(params.stage_project) ; then

          echo "Route not found, creating a new one"

          oc expose svc $(params.app_name) -n  $(params.stage_project);

        fi

      image: 'quay.io/openshift/origin-cli:latest'
{% endfor %}
