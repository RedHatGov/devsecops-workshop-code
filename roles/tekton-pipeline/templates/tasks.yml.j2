{% for username in workshop_users|json_query("[].username") %}
- apiVersion: tekton.dev/v1beta1
  kind: Task
  metadata:
    name: maven-java8
    namespace: {{ username }}-cicd
  spec:
    params:
    - name: GOALS
      default:
      - package
      description: maven goals to run
      type: array
    - name: settings-path
      default: configuration/cicd-settings-nexus3.xml
      description: location of the settings file
      type: string
    resources:
      inputs:
      - name: source
        type: git
    steps:
    - name: mvn-goals
      args:
      - $(params.GOALS)
      - '-s$(inputs.resources.source.path)/$(params.settings-path)'
      command:
      - /usr/bin/mvn
      image: 'gcr.io/cloud-builders/mvn:3.5.0-jdk-8'
      resources: {}
    workspaces:
    - name: maven-repo

- apiVersion: tekton.dev/v1beta1
  kind: Task
  metadata:
    name: build-jboss-app-image
    namespace: {{ username }}-cicd
  spec:
    params:
    - name: app_name
      default: tasks
      description: The name of the app
      type: string
    - name: project
      default: {{ username }}-cicd
      description: The name of the project for the build/imagestream
      type: string
    - name: artifact_path
      description: binary artifact path in the local artifact repo
      # something like org/jboss/quickstarts/eap/jboss-tasks-rs/7.0.0-SNAPSHOT/jboss-tasks-rs-7.0.0-SNAPSHOT.war
      type: string
    resources:
      inputs:
      - name: source
        type: git
    steps:
    - name: extract-git-rev
      image: 'gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:latest'
      script: >
        #!/bin/sh

        set -e -o pipefail

        # get git sha

        git rev-parse --verify --short HEAD | tee
        $(inputs.resources.source.path)/$(params.app_name)-gitsha.txt
      workingDir: $(inputs.resources.source.path)
    - name: create-build-config-and-configmap
      image: 'quay.io/openshift/origin-cli:latest'
      script: >
        #!/bin/sh

        set -e -o pipefail

        GITSHA=$(cat
        $(inputs.resources.source.path)/$(params.app_name)-gitsha.txt)


        echo "Extracted git revision from previous step $GITSHA"

        # This allows the new build to be created whether it exists or not

        echo "Creating new build config"

        oc new-build -o yaml --name=$(params.app_name) --image-stream=jboss-eap72-openshift:1.1  --binary=true -n
        $(params.project) | oc apply -n $(params.project) -f -

        # This saves the GITSHA to a configmap for use in later tasks

        if oc get configmap tekton-current-revision -n $(params.project); then

        echo "Deleting old git revision configmap"

        oc delete configmap tekton-current-revision -n $(params.project)

        fi

        echo "Creating configmap with git revision"

        oc create configmap tekton-current-revision -n $(params.project)
        --from-literal=revision=$GITSHA
    - name: build-app-image
      image: 'quay.io/openshift/origin-cli:latest'
      script: >
        #!/bin/sh

        set -e -o pipefail

        echo "Start the openshift build"


        rm -rf $(inputs.resources.source.path)/oc-build && mkdir -p $(inputs.resources.source.path)/oc-build/deployments


        cp $(workspaces.maven-repo.path)/$(params.artifact_path) $(inputs.resources.source.path)/oc-build/deployments/ROOT.war


        oc start-build $(params.app_name) --from-dir=$(inputs.resources.source.path)/oc-build -n $(params.project) --wait=true

        GITSHA=$(cat $(inputs.resources.source.path)/$(params.app_name)-gitsha.txt)

        oc tag $(params.app_name):latest  $(params.app_name):$GITSHA -n $(params.project)

        echo "Successfully created container image $(params.project)/$(params.app_name):$GITSHA"

    workspaces:
    - name: maven-repo

- apiVersion: tekton.dev/v1beta1
  kind: Task
  metadata:
    name: oscap-image-scan
    namespace: {{ username }}-cicd
  spec:
    params:
    - name: xccdfProfile
      description: The oscap xccdf profile to use when calling the oscap-chroot command
      default: xccdf_org.ssgproject.content_profile_standard
    - name: oscapProfilePath
      description: The full path to the oscap content file
      default: /usr/share/xml/scap/ssg/content/ssg-centos7-ds-1.2.xml
    - name: container-imagetag
      type: string
      default: latest
    - name: container-image-url
      type: string
      default: >
        image-registry.openshift-image-registry.svc.cluster.local:5000/{{ username }}-cicd/openshift-tasks
    workspaces:
    - name: report
      description: Storage for oscap report.html generated by oscap-chroot scan
    steps:
    - name: scan-image
      securityContext:
        privileged: true
      image: quay.io/redhatgov/image-scanner:latest
      command: ['/bin/bash']
      args:
      - -c
      - |
        echo "Pulling image $(inputs.params.container-image-url)"
        buildah from --storage-driver vfs docker://$(inputs.params.container-image-url):$(inputs.params.container-imagetag)
        container_id=$(buildah --storage-driver vfs containers -q)
        echo "Container ID: $container_id"
        echo "Mounting the container..."
        buildah mount --storage-driver vfs $container_id
        echo "Running oscap-chroot scan"
        oscap-chroot $(buildah --storage-driver vfs mount | awk '{print $2}') xccdf eval --profile $(inputs.params.xccdfProfile) --report $(workspaces.report.path)/report.html $(inputs.params.oscapProfilePath)
        echo "Displaying contents of $(workspaces.report.path)/report.html"
        echo "********** START OF report.html **********"
        cat $(workspaces.report.path)/report.html
        echo "********** END OF report.html ************"

- apiVersion: tekton.dev/v1beta1
  kind: Task
  metadata:
    name: deploy-app-from-imagestream
    namespace: {{ username }}-cicd
  spec:
    params:
    - name: app_name
      default: tasks
      description: The name of the app
      type: string
    - name: src_project
      default: {{ username }}-cicd
      description: The name of the project from which to copy the ImageStream
      type: string
    - name: dst_project
      default: {{ username }}-dev
      description: The name of the project to which to copy the ImageStream
      type: string
    - name: app_revision
      default: ''
      description: The tag of the container image to copy from src to dst
      type: string
    steps:
    - name: cleanup-dst-project
      script: >
        #!/bin/sh

        set -e -o pipefail

        if oc get dc/$(params.app_name) -n $(params.dst_project); then

          echo "Tasks dc exists, cleaning up resources "

          oc delete -n $(params.dst_project) dc/$(params.app_name) svc/$(params.app_name) route/$(params.app_name) || echo "Some resources didn't clean up as expected"

        fi

      image: 'quay.io/openshift/origin-cli:latest'
    - name: deploy-from-imagestream-to-dst-project
      script: >
        #!/bin/sh

        if [ "$(params.app_revision)" = "" ]; then

          GITSHA=`oc get configmap tekton-current-revision -n $(params.src_project)
          -o jsonpath='{ .data.revision }'`

        else

          GITSHA="$(params.app_revision)"

        fi

        echo "Tagging image stream from
        $(params.src_project)/$(params.app_name):$GITSHA
        to
        $(params.dst_project)/$(params.app_name):$GITSHA"

        oc tag
        $(params.src_project)/$(params.app_name):$GITSHA
        $(params.dst_project)/$(params.app_name):$GITSHA

        echo "Deploying new version into $(params.dst_project) project "

        oc new-app --image-stream=$(params.app_name):$GITSHA -n $(params.dst_project)
        --as-deployment-config=true -o yaml  | oc apply -n $(params.dst_project)  -f -

        oc expose svc $(params.app_name) -n  $(params.dst_project)

      image: 'quay.io/openshift/origin-cli:latest'
{% endfor %}
