---
- name: Download acme.sh
  git:
    repo: https://github.com/neilpang/acme.sh
    dest: '{{ tmp_dir }}/acme.sh'

- name: Ensure certificate directory exists
  file:
    path: '{{ certificate_path }}'
    state: directory

- name: Get necessary certs
  shell: |
    export KUBECONFIG='{{ kubeconfig }}'
    oc='{{ tmp_dir }}/oc'

    admin_user='{{ user.username }}'
    admin_password='{{ user.password }}'
    if [ $($oc whoami) != "$admin_user" ]; then
        $oc login --insecure-skip-tls-verify=true -u "$admin_user" -p "$admin_password" && echo changed || echo failed
    else
        echo ok
    fi

    acme='{{ tmp_dir }}/acme.sh/acme.sh'

    abort=0
    while ! api_endpoint=$($oc whoami --show-server); do
        sleep 5
        ((abort++))
        if [ $abort -ge 5 ]; then
            echo "Unable to get API endpoint address" >&2
            exit 1
        fi
    done
    api_endpoint=$(echo "$api_endpoint" | cut -d: -f2 | cut -d/ -f3)

    abort=0
    while ! wildcard_endpoint=\*.$($oc get ingresscontroller default -n openshift-ingress-operator -o jsonpath='{.status.domain}'); do
        sleep 5
        ((abort++))
        if [ $abort -ge 5 ]; then
            echo "Unable to get API endpoint address" >&2
            exit 1
        fi
    done

    acme_args=(-d "$api_endpoint" -d "$wildcard_endpoint" --dns dns_aws
        --cert-file '{{ certificate_path }}/cert.pem'
        --key-file '{{ certificate_path }}/key.pem'
        --ca-file '{{ certificate_path }}/ca.pem'
        --fullchain-file '{{ certificate_path }}/fullchain.pem'
    )
    if $acme --list | grep -qF "$api_endpoint" && $acme --list | grep -qF "$wildcard_endpoint"; then
        if ! $acme --install-cert "${acme_args[@]}"; then
            $acme --renew "${acme_args[@]}" || exit 1
        fi
    else
        $acme --issue "${acme_args[@]}" || exit 1
    fi
  args:
    creates: '{{ certificate_path }}/fullchain.pem'
  environment:
    AWS_ACCESS_KEY_ID: '{{ AWS_ACCESS_KEY_ID|default(ansible_env["AWS_ACCESS_KEY_ID"]) }}'
    AWS_SECRET_ACCESS_KEY: '{{ AWS_SECRET_ACCESS_KEY|default(ansible_env["AWS_SECRET_ACCESS_KEY"]) }}'
  loop:
    - "{{ openshift_users|json_query('[?admin] | [0]') }}"
  loop_control:
    loop_var: user
    label: '{{ user.username }}'

- name: Create the new TLS secrets
  k8s:
    state: present
    kubeconfig: '{{ kubeconfig }}'
    namespace: openshift-ingress
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: router-certs
      type: kubernetes.io/tls
      stringData:
        tls.crt: |
          {{ lookup("file", certificate_path + "/fullchain.pem") }}
        tls.key: |
          {{ lookup("file", certificate_path + "/key.pem") }}

- name: Update ingress controller to use new certs
  k8s:
    kubeconfig: '{{ kubeconfig }}'
    namespace: openshift-ingress-operator
    merge_type: merge
    definition:
      kind: IngressController
      metadata:
        name: default
      spec:
        defaultCertificate:
          name: router-certs
