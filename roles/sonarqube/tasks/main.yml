---
- name: Ensure namespace exists
  k8s:
    kubeconfig: '{{ kubeconfig }}'
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: '{{ sonarqube_project_name }}'
        annotations:
          openshift.io/display-name: '{{ sonarqube_project_display }}'
      spec: {}

- name: Deploy resources for SonarQube Operator
  k8s:
    kubeconfig: '{{ kubeconfig }}'
    namespace: '{{ resource.namespace|default(omit) }}'
    definition: '{{ lookup("url", resource.url, split_lines=False)|from_yaml|regex_replace("REPLACE_ME", sonarqube_project_name) }}'
  loop:
    - name: crd
      url: https://raw.githubusercontent.com/{{ github_project }}/sonarqube-operator/master/deploy/crds/gpte_v1alpha1_gsonarqube_crd.yaml
    - name: cluster_role
      url: https://raw.githubusercontent.com/{{ github_project }}/sonarqube-operator/master/deploy/cluster_role.yaml
    - name: service_account
      url: https://raw.githubusercontent.com/{{ github_project }}/sonarqube-operator/master/deploy/service_account.yaml
      namespace: '{{ sonarqube_project_name }}'
    - name: cluster_role_binding
      url: https://raw.githubusercontent.com/{{ github_project }}/sonarqube-operator/master/deploy/cluster_role_binding.yaml
      namespace: '{{ sonarqube_project_name }}'
    - name: operator
      url: https://raw.githubusercontent.com/{{ github_project }}/sonarqube-operator/master/deploy/operator.yaml
      namespace: '{{ sonarqube_project_name }}'
  loop_control:
    loop_var: resource
    label: '{{ resource.name }}'

- name: Create SonarQube from a CR
  k8s:
    kubeconfig: '{{ kubeconfig }}'
    namespace: '{{ sonarqube_project_name }}'
    definition:
      apiVersion: gpte.opentlc.com/v1alpha1
      kind: Sonarqube
      metadata:
        name: sonarqube
      spec:
        postgresqlVolumeSize: 4Gi
        sonarqubeVolumeSize: 4Gi
        sonarqubeServiceName: sonarqube
        sonarqubeSsl: true
  register: sq_deployment
  until: not sq_deployment.failed
  retries: 5
  delay: 10

- name: Wait for SonarQube to finish being created
  k8s_info:
    kubeconfig: '{{ kubeconfig }}'
    api_version: v1
    kind: Pod
    namespace: '{{ sonarqube_project_name }}'
    label_selectors:
      - app=sonarqube
  register: sonarqube_pod
  until: sonarqube_pod.resources|length > 0 and (sonarqube_pod.resources|first).status.phase == "Running"
  retries: 10
  delay: 30

#~ # This is super hacky, I know... but it works for now. Will need fixing.
#~ # Intent is to eventually clean up the operator and add more levers to the CRD.
#~ - name: Create users in GOGS
  #~ shell: |
    #~ export KUBECONFIG='{{ kubeconfig }}'
    #~ oc='{{ tmp_dir }}/oc'
    #~ admin_user='{{ workshop_admin.username }}'
    #~ admin_password='{{ workshop_admin.password }}'
    #~ if [ $($oc whoami) != "$admin_user" ]; then
        #~ $oc login --insecure-skip-tls-verify=true -u "$admin_user" -p "$admin_password" || exit 1
    #~ fi

    #~ {% for user in openshift_users %}
    #~ args=(--name {{ user.username }} --password '{{ user.password }}')
    #~ {% if user.admin is defined and user.admin %}
    #~ args+=(--admin)
    #~ {% endif %}
    #~ args+=(--email '{{ user.username }}@{{ cluster_name }}.{{ openshift_base_domain }}')

    #~ echo "running: $oc exec deploy/gogs -n devsecops -- /opt/gogs/gogs admin create-user ${args[@]}"
    #~ output=$($oc exec deploy/gogs -n devsecops -- /opt/gogs/gogs admin create-user "${args[@]}" 2>&1)
    #~ if echo "$output" | grep -qF 'created!'; then
        #~ echo changed
    #~ elif echo "$output" | grep -qF 'already exists'; then
        #~ echo ok
    #~ else
        #~ echo failed
        #~ echo "output: $output"
    #~ fi
    #~ {% endfor %}
  #~ register: gogs_users
  #~ changed_when: '"changed" in gogs_users.stdout_lines'
  #~ failed_when: '"failed" in gogs_users.stdout_lines'
